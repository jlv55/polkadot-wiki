"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[220],{41255:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"learn/learn-guides-test-opengov-proposals","title":"Test OpenGov Referenda before Submission","description":"Polkadot-JS Guides about testing Polkadot OpenGov referenda using Chopsticks","source":"@site/../docs/learn/learn-guides-test-opengov-proposals.md","sourceDirName":"learn","slug":"/learn-guides-test-opengov-proposals","permalink":"/docs/learn-guides-test-opengov-proposals","draft":false,"unlisted":false,"editUrl":"https://github.com/w3f/polkadot-wiki/edit/master/docs/learn/learn-guides-test-opengov-proposals.md","tags":[],"version":"current","lastUpdatedBy":"github-actions[bot]","lastUpdatedAt":1731920689000,"frontMatter":{"id":"learn-guides-test-opengov-proposals","title":"Test OpenGov Referenda before Submission","sidebar_label":"Test OpenGov Referenda","description":"Polkadot-JS Guides about testing Polkadot OpenGov referenda using Chopsticks","keywords":["opengov","polkadot opengov","referenda","polkadot-js"],"slug":"../learn-guides-test-opengov-proposals"},"sidebar":"docs","previous":{"title":"OpenGov Guides","permalink":"/docs/learn-guides-polkadot-opengov"},"next":{"title":"Treasury Guides","permalink":"/docs/learn-guides-treasury"}}');var s=t(74848),o=t(28453);const c={id:"learn-guides-test-opengov-proposals",title:"Test OpenGov Referenda before Submission",sidebar_label:"Test OpenGov Referenda",description:"Polkadot-JS Guides about testing Polkadot OpenGov referenda using Chopsticks",keywords:["opengov","polkadot opengov","referenda","polkadot-js"],slug:"../learn-guides-test-opengov-proposals"},i=void 0,d={},l=[{value:"Test a Polkadot OpenGov Referendum",id:"test-a-polkadot-opengov-referendum",level:2},{value:"Fork a Network Locally using Chopsticks",id:"fork-a-network-locally-using-chopsticks",level:3},{value:"Test a Polkadot OpenGov Referendum with Cross-chain Calls",id:"test-a-polkadot-opengov-referendum-with-cross-chain-calls",level:2},{value:"Cross-chain Testing setup using Chopsticks",id:"cross-chain-testing-setup-using-chopsticks",level:3}];function r(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"A Polkadot OpenGov referendum always contains a call that will be executed after the referendum is\nvoted in successfully. The referendum proposer is responsible for checking if the call gets executed\nsuccessfully on-chain and whether an appropriate origin and track have been chosen. In the case of\nreferenda that send a cross-chain call to the system chains, it is important to check whether the\nXCM call gets dispatched successfully from Polkadot and is received/executed as expected on the\nsystem chain."}),"\n",(0,s.jsx)(n.p,{children:"This tutorial aims to show how to test the calls to be submitted with the referendum and ensure they\nwork as expected. Let us consider the two examples below:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Submitting a Treasury referendum that requests 4500 DOT"}),"\n",(0,s.jsxs)(n.li,{children:["Submitting a referendum to remove ambassadors\n(",(0,s.jsx)(n.a,{href:"https://polkadot.subsquare.io/referenda/1247",children:"Referendum 1247"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"test-a-polkadot-opengov-referendum",children:"Test a Polkadot OpenGov Referendum"}),"\n",(0,s.jsxs)(n.p,{children:["To request 4500 DOT from the treasury, you must create a pre-image with the call\n",(0,s.jsx)(n.code,{children:"treasury.spendLocal(amount,beneficiary)"}),". The guide for creating pre-images for treasury proposals\nand submitting them is available ",(0,s.jsx)(n.a,{href:"/docs/learn-guides-polkadot-opengov",children:"here"})," on the Wiki. The proposer\nneeds to know the exact origin and track to submit this proposal. As this is a treasury proposal, it\nwould be one of the treasury tracks -\n",(0,s.jsx)(n.a,{href:"/docs/learn-polkadot-opengov-origins#small-spender",children:"SmallSpender"})," in the case of 4500 DOT."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"0x13030b00d00361ed28009e4e7009937c56d267338762a60ed004293afd40e7c2081847c12cb63c76a818"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"opengov-treasury-proposal-call",src:t(3074).A+"",width:"2880",height:"1247"})}),"\n",(0,s.jsx)(n.h3,{id:"fork-a-network-locally-using-chopsticks",children:"Fork a Network Locally using Chopsticks"}),"\n",(0,s.jsxs)(n.p,{children:["If you like to check whether the call above will get executed successfully, you can check that by\nperforming a dry run using ",(0,s.jsx)(n.a,{href:"https://github.com/AcalaNetwork/chopsticks",children:"Chopsticks"}),', which is\nembedded in Polkadot JS UI. You can run a Chopsticks instance of any Polkadot SDK based chain by\nclicking "fork locally" on the UI. The snapshot below shows it for Polkadot.']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"polkadot-fork-locally",src:t(82865).A+"",width:"2178",height:"658"})}),"\n",(0,s.jsx)(n.p,{children:"After forking locally, the Polkadot JS UI displays a local instance of the Polkadot network, which\ndoes not produce any blocks by default. You will notice a few test accounts with DOT balance that\ncan interact with the network and test out Polkadot protocol features accessible through regular\naccounts. However, the treasury spend call cannot be submitted through a signed account origin, so\nit has to be tested with a treasury track origin. It can be tested by navigating to Developer >\nJavascript tab on Polkadot JS UI, which dispatches the call on the next block via the scheduler with\nthe specified origin."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"const number = (await api.rpc.chain.getHeader()).number.toNumber()\nawait api.rpc('dev_setStorage', {\n scheduler: {\n   agenda: [\n     [\n       [number + 1], [\n         {\n           call: {\n             Inline: '0x13030b00d00361ed28009e4e7009937c56d267338762a60ed004293afd40e7c2081847c12cb63c76a818'\n           },\n           origin: {\n             origins: 'SmallSpender'\n           }\n         }\n       ]\n     ]\n   ]\n }\n})\nawait api.rpc('dev_newBlock')\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"polkadot-chopstciks-call",src:t(78292).A+"",width:"2446",height:"1277"})}),"\n",(0,s.jsx)(n.p,{children:"After clicking the play button in the Javascript console, the block number visible on the top left\nof the Polkadot JS UI should be incremented by 1. You can navigate to Polkadot JS UI Network >\nExplorer to check the emitted events and see if the call was executed successfully. You should see\nthe errors displayed here if the call is unsuccessful."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"polkadot-js-ui-explorer",src:t(25446).A+"",width:"2880",height:"1147"})}),"\n",(0,s.jsx)(n.h2,{id:"test-a-polkadot-opengov-referendum-with-cross-chain-calls",children:"Test a Polkadot OpenGov Referendum with Cross-chain Calls"}),"\n",(0,s.jsx)(n.p,{children:"Take the example of removing a member of the ambassador collective on the Collectives system chain\nthrough a Polkadot OpenGov referendum. Obtain the call data to remove a member from the ambassador\ncollective in the Collectives system chain runtime."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"collectives-remove-ambassador",src:t(44566).A+"",width:"2832",height:"898"})}),"\n",(0,s.jsxs)(n.p,{children:["Note down the call data and navigate to Developer > Runtime calls and fetch the weights for\nexecution of the call through ",(0,s.jsx)(n.code,{children:"transactionPaymentCallApi.queryCallInfo"}),". Here is the call info used\nin our example for your reference:\n",(0,s.jsx)(n.code,{children:"0x4603000c691601793de060491dab143dfae19f5f6413d4ce4c363637e5ceacb2836a4e0300"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"tx-payment-call-api",src:t(54104).A+"",width:"2605",height:"1168"})}),"\n",(0,s.jsxs)(n.p,{children:["Now you have all the information you need to create an XCM call that needs to be sent from Polkadot.\nNo fee payment is required for an XCM call dispatched through OpenGov. The Collectives chain\n",(0,s.jsx)(n.code,{children:"ParaID"})," is 1001. With this information, we can construct the XCM call shown below."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"0x630004000100a50f04082f0000060303e3c4cc9589ad944603000c691601793de060491dab143dfae19f5f6413d4ce4c363637e5ceacb2836a4e0300"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"unpaid-execution-xcm-call",src:t(82245).A+"",width:"2436",height:"3100"})}),"\n",(0,s.jsx)(n.h3,{id:"cross-chain-testing-setup-using-chopsticks",children:"Cross-chain Testing setup using Chopsticks"}),"\n",(0,s.jsxs)(n.p,{children:["Testing this cross-chain call by ",(0,s.jsx)(n.a,{href:"#fork-a-network-locally-using-chopsticks",children:"forking locally"})," will\nonly perform the required checks on the sending chain, not the receiving chain. To do cross-chain\ntesting, download and install ",(0,s.jsx)(n.a,{href:"https://github.com/AcalaNetwork/chopsticks",children:"Chopsticks"})," on your\nmachine and run the command below:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"npx @acala-network/chopsticks@latest xcm -r polkadot -p polkadot-collectives"})}),"\n",(0,s.jsx)(n.p,{children:"This should start the Polkadot and the Collectives instances available at ports 8001 and 8000\nrespectively. Connect to both these instances using Polkadot JS UI on two separate browser windows.\nTo connect to these local machine instances at the designated ports, edit the custom endpoint for\nPolkadot JS UI as shown in the picture below and click on Switch button at the top."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"polkadot-js-local",src:t(7720).A+"",width:"2606",height:"1054"})}),"\n",(0,s.jsx)(n.p,{children:"Navigate to the Polkadot instance and open Javascript console to run the code below."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"const number = (await api.rpc.chain.getHeader()).number.toNumber()\nawait api.rpc('dev_setStorage', {\n scheduler: {\n   agenda: [\n     [\n       [number + 1], [\n         {\n           call: {\n             Inline: '0x630004000100a50f04082f0000060303e3c4cc9589ad944603000c691601793de060491dab143dfae19f5f6413d4ce4c363637e5ceacb2836a4e0300'\n           },\n           origin: {\n             origins: 'FellowshipAdmin'\n           }\n         }\n       ]\n     ]\n   ]\n }\n})\nawait api.rpc('dev_newBlock')\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"javascript-fellowship-admin",src:t(74201).A+"",width:"2306",height:"1307"})}),"\n",(0,s.jsx)(n.p,{children:"After clicking on the play button in the Javascript console, the block number visible on the top\nleft of the Polkadot JS UI should be incremented by 1. You can navigate to Polkadot JS UI Network >\nExplorer to check the emitted events and see if the call got executed successfully. If the call is\nunsuccessful, you should see the respective errors displayed here."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Successful XCM call dispatch shown on the Polkadot network:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"xcm-polkadot-send",src:t(19647).A+"",width:"2880",height:"1003"})}),"\n",(0,s.jsx)(n.p,{children:"You can then navigate to the local Collectives instance and check the events to confirm the call is\nexecuted as expected."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Successful XCM call receipt shown on the Collectives system chain:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"xcm-collectives-receive",src:t(95221).A+"",width:"2869",height:"1040"})}),"\n",(0,s.jsxs)(n.p,{children:["Now, take the example of ",(0,s.jsx)(n.a,{href:"https://polkadot.subsquare.io/referenda/1247",children:"Referendum 1247"})," which\nexecutes a call that tries to remove 19 ambassadors from the collective at once. This is a very long\ncall and exceeds the Javascript console ",(0,s.jsx)(n.code,{children:"inLine"})," character limit. In that case, the code can be\nmodified instead to lookup the preimage of call with the specified length and check if it is\nsuccessfully executes."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"0x630004000100a50f04082f0000060307005847f80d824f12009d0b28045046030090bd3d091b8837f2f41c38b6e3bebd28a31ee280f82d15e687f95d798ef41c1703004603000c7f10142a81fedec753f7c556f5b93a400c280805e7fcdff668719637b13434030046030062d8c4e1c6fbab57ba4df15b8120db4cec5c150371d0755d8ee5312382f47f09030046030094c860705264b96854acc3cb307365132bd131524ef83a7c014378ed793737230300460300aeb6173b1b6d5933c79992954d1469e845a89a5c754f91a9cb2f7589d78b9970030046030018bd4fb6b90f5088bdc825c3d674bd72e705c6f1163e86f960eeb7969ab4833a03004603002add0af948eba3b1fcd5cacde1f6fcc70f11ef75056f88ca4d11dcc5b080220e03004603009a3a7fc4a0eba9a8bd47c96aedfb5436ecc4d39536af5fca275fbf88104eae070300460300f4792917b47917519e2c05619763a4e7b45b84815f902f62e16f23e9f2b2265303004603008e156836bd7dc0639ea54540eb6ec55aec2a3793876208bf5d71ff89eb746a07030046030008b712a589f5cb71cd7094809785ab0a924358d3cb52b27efd4933b6efc149630300460300cc10dd1946b0fc65c8993ff7f47052713e9aa4b1cb72c913bd397c34adf4f9490300460300d6b8ec23dc68f20b5d315007d9c1a6706f9bd5c883319181129e76a89e97815503004603000c691601793de060491dab143dfae19f5f6413d4ce4c363637e5ceacb2836a4e03004603000ef2cc1000f878a3880a09d698b5375f20c4ab3d8b3a1b783c8150faca3da65a03004603001eb38b0d5178bc680c10a204f81164946a25078c6d3b5f6813cef61c3aef48430300460300568191edc1aaf4bea93b17cf53ea49ab78e2d25d83dec8581854be93d3bc9609030046030088f28e17671ba1808d7b02cd3caaf80113066a467127666f4d80afc50bfbc1270300460300b430a1d38186a28164facec9010e36b1289eb6d3ad0f03f328188fd52bcb333a0300460300ce2490656709c33bdd50d72dc0ec562bb72db84945ef7a1be45be14bbc6fc8770300"})}),"\n",(0,s.jsxs)(n.p,{children:["The preimage hash of this call is\n",(0,s.jsx)(n.code,{children:"0x82802c62d52a2431e422b58fff1fbdd0efc648e7c98351bd26048d169b94f956"})," and its length is ",(0,s.jsx)(n.code,{children:"733"}),"\n(obtained from Polkadot JS UI Governance > Preimgaes tab for that lists the preimages that are\nalready submitted)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"const number = (await api.rpc.chain.getHeader()).number.toNumber()\nawait api.rpc('dev_setStorage', {\n scheduler: {\n   agenda: [\n     [\n       [number + 1], [\n         {\n           call: {\n             Lookup: {\n               hash: \"0x82802c62d52a2431e422b58fff1fbdd0efc648e7c98351bd26048d169b94f956\",\n               len: 733\n             }\n           },\n           origin: {\n             origins: 'FellowshipAdmin'\n           }\n         }\n       ]\n     ]\n   ]\n }\n})\nawait api.rpc('dev_newBlock')\n"})}),"\n",(0,s.jsx)(n.p,{children:"If there are referenda that are to be submitted on Root track and you like to test it, you can use\nthe same template as above and replace"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"           origin: {\n             origins: 'FellowshipAdmin'\n           }\n"})}),"\n",(0,s.jsx)(n.p,{children:"with"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"           system: {\n             origin: 'Root'\n           }\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},95221:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/collectives-receive-xcm-8e3274e7307d94f25f460806eccb3273.png"},54104:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/collectives-remove-call-weights-1ef3aabcb290fab7a658d685bd1dc79c.png"},44566:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/collectives-remove-member-36db3241576f8830128bb0234edaa754.png"},82245:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/collectives-remove-xcm-call-d20ab5b1f91144b671ff3891fdefd31d.png"},74201:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/javascript-console-fellowship-admin-call-77516691d01dba45194e56f6235d5480.png"},3074:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/opengov-call-test-treasury-proposal-73db7fd1456a22042d863a1531f2b4a1.png"},78292:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/polkadot-chopsticks-call-41f282432fd6bccbfb4b1c9406d01c20.png"},82865:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/polkadot-fork-locally-16b8cdbb89c2c36a6d2620cc641617f1.png"},7720:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/polkadot-js-local-node-da57d299ee6aa824f085d9b8f7fcbf57.png"},25446:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/polkadot-js-ui-explorer-2767792d7255261f4511d15507ba78dd.png"},19647:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/polkadot-send-xcm-6cde6e68c3a96a576eaa81af10c98e0e.png"},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var a=t(96540);const s={},o=a.createContext(s);function c(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);